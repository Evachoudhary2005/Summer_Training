#include <iostream>
using namespace std;

// Hoare Partition Scheme
int partition(int arr[], int low, int high) {
    int pivot = arr[low];
    int i = low - 1;
    int j = high + 1;

    while (true) {
        // Move i to the right until element >= pivot
        do {
            i++;
        } while (arr[i] < pivot);

        // Move j to the left until element <= pivot
        do {
            j--;
        } while (arr[j] > pivot);

        // If two pointers meet or cross
        if (i >= j)
            return j;

        // Swap arr[i] and arr[j]
        swap(arr[i], arr[j]);
    }
}

// QuickSort using Hoare partition
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        // Note: pi is not the pivot index itself
        quickSort(arr, low, pi);
        quickSort(arr, pi + 1, high);
    }
}

// Print array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Main
int main() {
    int arr[] = {29, 10, 14, 37, 14};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: ";
    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    printArray(arr, n);

    return 0;
}
